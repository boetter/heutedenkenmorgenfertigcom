{"version":3,"file":"react-hotkeys-hook.cjs.production.min.js","sources":["../src/parseHotkeys.ts","../src/isHotkeyPressed.ts","../src/validators.ts","../src/BoundHotkeysProxyProvider.tsx","../src/deepEqual.ts","../src/HotkeysProvider.tsx","../src/useHotkeys.ts","../src/useDeepEqualMemo.ts","../src/useRecordHotkeys.ts"],"sourcesContent":["import { Hotkey, KeyboardModifiers, Keys } from './types'\n\nconst reservedModifierKeywords = ['shift', 'alt', 'meta', 'mod', 'ctrl']\n\nconst mappedKeys: Record<string, string> = {\n  esc: 'escape',\n  return: 'enter',\n  '.': 'period',\n  ',': 'comma',\n  '-': 'slash',\n  ' ': 'space',\n  '`': 'backquote',\n  '#': 'backslash',\n  '+': 'bracketright',\n  'ShiftLeft': 'shift',\n  'ShiftRight': 'shift',\n  'AltLeft': 'alt',\n  'AltRight': 'alt',\n  'MetaLeft': 'meta',\n  'MetaRight': 'meta',\n  'ControlLeft': 'ctrl',\n  'ControlRight': 'ctrl',\n}\n\nexport function mapKey(key: string): string {\n  return (mappedKeys[key] || key)\n    .trim()\n    .toLowerCase()\n    .replace('key', '')\n    .replace('digit', '')\n    .replace('numpad', '')\n    .replace('arrow', '')\n}\n\nexport function isHotkeyModifier(key: string) {\n  return reservedModifierKeywords.includes(key)\n}\n\nexport function parseKeysHookInput(keys: Keys, splitKey: string = ','): string[] {\n  if (typeof keys === 'string') {\n    return keys.split(splitKey)\n  }\n\n  return keys\n}\n\nexport function parseHotkey(hotkey: string, combinationKey: string = '+'): Hotkey {\n  const keys = hotkey\n    .toLocaleLowerCase()\n    .split(combinationKey)\n    .map(k => mapKey(k))\n\n  const modifiers: KeyboardModifiers = {\n    alt: keys.includes('alt'),\n    ctrl: keys.includes('ctrl') || keys.includes('control'),\n    shift: keys.includes('shift'),\n    meta: keys.includes('meta'),\n    mod: keys.includes('mod'),\n  }\n\n  const singleCharKeys = keys.filter((k) => !reservedModifierKeywords.includes(k))\n\n  return {\n    ...modifiers,\n    keys: singleCharKeys,\n  }\n}\n","import { isHotkeyModifier, mapKey } from './parseHotkeys'\n\nconst currentlyPressedKeys: Set<string> = new Set<string>()\n\nexport function isHotkeyPressed(key: string | string[], splitKey: string = ','): boolean {\n  const hotkeyArray = Array.isArray(key) ? key : key.split(splitKey)\n\n  return hotkeyArray.every((hotkey) => currentlyPressedKeys.has(hotkey.trim().toLowerCase()))\n}\n\nexport function pushToCurrentlyPressedKeys(key: string | string[]): void {\n  const hotkeyArray = Array.isArray(key) ? key : [key]\n\n  /*\n  Due to a weird behavior on macOS we need to clear the set if the user pressed down the meta key and presses another key.\n  https://stackoverflow.com/questions/11818637/why-does-javascript-drop-keyup-events-when-the-metakey-is-pressed-on-mac-browser\n  Otherwise the set will hold all ever pressed keys while the meta key is down which leads to wrong results.\n   */\n  if (currentlyPressedKeys.has('meta')) {\n    currentlyPressedKeys.forEach(key => !isHotkeyModifier(key) && currentlyPressedKeys.delete(key.toLowerCase()))\n  }\n\n  hotkeyArray.forEach(hotkey => currentlyPressedKeys.add(hotkey.toLowerCase()))\n}\n\nexport function removeFromCurrentlyPressedKeys(key: string | string[]): void {\n  const hotkeyArray = Array.isArray(key) ? key : [key]\n\n  /*\n  Due to a weird behavior on macOS we need to clear the set if the user pressed down the meta key and presses another key.\n  https://stackoverflow.com/questions/11818637/why-does-javascript-drop-keyup-events-when-the-metakey-is-pressed-on-mac-browser\n  Otherwise the set will hold all ever pressed keys while the meta key is down which leads to wrong results.\n   */\n  if (key === 'meta') {\n    currentlyPressedKeys.clear()\n  } else {\n    hotkeyArray.forEach(hotkey => currentlyPressedKeys.delete(hotkey.toLowerCase()))\n  }\n}\n\n(() => {\n  if (typeof document !== 'undefined') {\n    document.addEventListener('keydown', e => {\n      if (e.key === undefined) {\n        // Synthetic event (e.g., Chrome autofill).  Ignore.\n        return\n      }\n\n      pushToCurrentlyPressedKeys([mapKey(e.key), mapKey(e.code)])\n    })\n\n    document.addEventListener('keyup', e => {\n      if (e.key === undefined) {\n        // Synthetic event (e.g., Chrome autofill).  Ignore.\n        return\n      }\n\n      removeFromCurrentlyPressedKeys([mapKey(e.key), mapKey(e.code)])\n    })\n  }\n\n  if (typeof window !== 'undefined') {\n    window.addEventListener('blur', () => {\n      currentlyPressedKeys.clear()\n    })\n  }\n})()\n","import { FormTags, Hotkey, Scopes, Trigger } from './types'\nimport { isHotkeyPressed } from './isHotkeyPressed'\nimport { mapKey } from './parseHotkeys'\n\nexport function maybePreventDefault(e: KeyboardEvent, hotkey: Hotkey, preventDefault?: Trigger): void {\n  if ((typeof preventDefault === 'function' && preventDefault(e, hotkey)) || preventDefault === true) {\n    e.preventDefault()\n  }\n}\n\nexport function isHotkeyEnabled(e: KeyboardEvent, hotkey: Hotkey, enabled?: Trigger): boolean {\n  if (typeof enabled === 'function') {\n    return enabled(e, hotkey)\n  }\n\n  return enabled === true || enabled === undefined\n}\n\nexport function isKeyboardEventTriggeredByInput(ev: KeyboardEvent): boolean {\n  return isHotkeyEnabledOnTag(ev, ['input', 'textarea', 'select'])\n}\n\nexport function isHotkeyEnabledOnTag({ target }: KeyboardEvent, enabledOnTags: FormTags[] | boolean = false): boolean {\n  const targetTagName = target && (target as HTMLElement).tagName\n\n  if (enabledOnTags instanceof Array) {\n    return Boolean(targetTagName && enabledOnTags && enabledOnTags.some(tag => tag.toLowerCase() === targetTagName.toLowerCase()))\n  }\n\n  return Boolean(targetTagName && enabledOnTags && enabledOnTags === true)\n}\n\nexport function isScopeActive(activeScopes: string[], scopes?: Scopes): boolean {\n  if (activeScopes.length === 0 && scopes) {\n    console.warn(\n      'A hotkey has the \"scopes\" option set, however no active scopes were found. If you want to use the global scopes feature, you need to wrap your app in a <HotkeysProvider>',\n    )\n\n    return true\n  }\n\n  if (!scopes) {\n    return true\n  }\n\n  return activeScopes.some(scope => scopes.includes(scope)) || activeScopes.includes('*')\n}\n\nexport const isHotkeyMatchingKeyboardEvent = (e: KeyboardEvent, hotkey: Hotkey, ignoreModifiers: boolean = false): boolean => {\n  const { alt, meta, mod, shift, ctrl, keys } = hotkey\n  const { key: pressedKeyUppercase, code, ctrlKey, metaKey, shiftKey, altKey } = e\n\n  const keyCode = mapKey(code)\n  const pressedKey = pressedKeyUppercase.toLowerCase()\n\n  if (!ignoreModifiers) {\n    // We check the pressed keys for compatibility with the keyup event. In keyup events the modifier flags are not set.\n    if (alt === !altKey && pressedKey !== 'alt') {\n      return false\n    }\n\n    if (shift === !shiftKey && pressedKey !== 'shift') {\n      return false\n    }\n\n    // Mod is a special key name that is checking for meta on macOS and ctrl on other platforms\n    if (mod) {\n      if (!metaKey && !ctrlKey) {\n        return false\n      }\n    } else {\n      if (meta === !metaKey && pressedKey !== 'meta') {\n        return false\n      }\n\n      if (ctrl === !ctrlKey && pressedKey !== 'ctrl') {\n        return false\n      }\n    }\n  }\n\n  // All modifiers are correct, now check the key\n  // If the key is set, we check for the key\n  if (keys && keys.length === 1 && (keys.includes(pressedKey) || keys.includes(keyCode))) {\n    return true\n  } else if (keys) {\n    // Check if all keys are present in pressedDownKeys set\n    return isHotkeyPressed(keys)\n  } else if (!keys) {\n    // If the key is not set, we only listen for modifiers, that check went alright, so we return true\n    return true\n  }\n\n  // There is nothing that matches.\n  return false\n}\n","import { createContext, ReactNode, useContext } from 'react'\nimport { Hotkey } from './types'\n\ntype BoundHotkeysProxyProviderType = {\n  addHotkey: (hotkey: Hotkey) => void,\n  removeHotkey: (hotkey: Hotkey) => void,\n}\n\nconst BoundHotkeysProxyProvider = createContext<BoundHotkeysProxyProviderType | undefined>(undefined)\n\nexport const useBoundHotkeysProxy = () => {\n  return useContext(BoundHotkeysProxyProvider)\n}\n\ninterface Props {\n  children: ReactNode\n  addHotkey: (hotkey: Hotkey) => void\n  removeHotkey: (hotkey: Hotkey) => void\n}\n\nexport default function BoundHotkeysProxyProviderProvider({ addHotkey, removeHotkey, children }: Props) {\n  return <BoundHotkeysProxyProvider.Provider value={{addHotkey, removeHotkey}}>{children}</BoundHotkeysProxyProvider.Provider>\n}\n","export default function deepEqual(x: any, y: any): boolean {\n  //@ts-ignore\n  return (x && y && typeof x === 'object' && typeof y === 'object')\n    //@ts-ignore\n    ? (Object.keys(x).length === Object.keys(y).length) && Object.keys(x).reduce(function(isEqual, key) {\n      return isEqual && deepEqual(x[key], y[key])\n    }, true)\n    : (x === y)\n}\n","import { Hotkey } from './types'\nimport { createContext, ReactNode, useState, useContext, useCallback } from 'react'\nimport BoundHotkeysProxyProviderProvider from './BoundHotkeysProxyProvider'\nimport deepEqual from './deepEqual'\n\nexport type HotkeysContextType = {\n  hotkeys: ReadonlyArray<Hotkey>\n  enabledScopes: string[]\n  toggleScope: (scope: string) => void\n  enableScope: (scope: string) => void\n  disableScope: (scope: string) => void\n}\n\n// The context is only needed for special features like global scoping, so we use a graceful default fallback\nconst HotkeysContext = createContext<HotkeysContextType>({\n  hotkeys: [],\n  enabledScopes: [], // This array has to be empty instead of containing '*' as default, to check if the provider is set or not\n  toggleScope: () => {},\n  enableScope: () => {},\n  disableScope: () => {},\n})\n\nexport const useHotkeysContext = () => {\n  return useContext(HotkeysContext)\n}\n\ninterface Props {\n  initiallyActiveScopes?: string[]\n  children: ReactNode\n}\n\nexport const HotkeysProvider = ({initiallyActiveScopes = ['*'], children}: Props) => {\n  const [internalActiveScopes, setInternalActiveScopes] = useState(initiallyActiveScopes?.length > 0 ? initiallyActiveScopes : ['*'])\n  const [boundHotkeys, setBoundHotkeys] = useState<Hotkey[]>([]);\n\n  const enableScope = useCallback((scope: string) => {\n    setInternalActiveScopes((prev) => {\n      if (prev.includes('*')) {\n        return [scope]\n      }\n\n      return Array.from(new Set([...prev, scope]))\n    })\n  }, [])\n\n  const disableScope = useCallback((scope: string) => {\n    setInternalActiveScopes((prev) => {\n      if (prev.filter(s => s !== scope).length === 0) {\n        return ['*']\n      } else {\n        return prev.filter(s => s !== scope)\n      }\n    })\n  }, [])\n\n  const toggleScope = useCallback((scope: string) => {\n    setInternalActiveScopes((prev) => {\n      if (prev.includes(scope)) {\n        if (prev.filter(s => s !== scope).length === 0) {\n          return ['*']\n        } else {\n          return prev.filter(s => s !== scope)\n        }\n      } else {\n        if (prev.includes('*')) {\n          return [scope]\n        }\n\n        return Array.from(new Set([...prev, scope]))\n      }\n    })\n  }, [])\n\n  const addBoundHotkey = useCallback((hotkey: Hotkey) => {\n    setBoundHotkeys((prev) => [...prev, hotkey])\n  }, [])\n\n  const removeBoundHotkey = useCallback((hotkey: Hotkey) => {\n    setBoundHotkeys((prev) => prev.filter(h => !deepEqual(h, hotkey)))\n  }, [])\n\n  return (\n    <HotkeysContext.Provider value={{enabledScopes: internalActiveScopes, hotkeys: boundHotkeys, enableScope, disableScope, toggleScope}}>\n      <BoundHotkeysProxyProviderProvider addHotkey={addBoundHotkey} removeHotkey={removeBoundHotkey}>\n        {children}\n      </BoundHotkeysProxyProviderProvider>\n    </HotkeysContext.Provider>\n  )\n}\n","import { HotkeyCallback, Keys, Options, OptionsOrDependencyArray, RefType } from './types'\nimport { DependencyList, useCallback, useEffect, useLayoutEffect, useRef } from 'react'\nimport { mapKey, parseHotkey, parseKeysHookInput } from './parseHotkeys'\nimport {\n  isHotkeyEnabled,\n  isHotkeyEnabledOnTag,\n  isHotkeyMatchingKeyboardEvent,\n  isKeyboardEventTriggeredByInput,\n  isScopeActive,\n  maybePreventDefault,\n} from './validators'\nimport { useHotkeysContext } from './HotkeysProvider'\nimport { useBoundHotkeysProxy } from './BoundHotkeysProxyProvider'\nimport useDeepEqualMemo from './useDeepEqualMemo'\nimport { pushToCurrentlyPressedKeys, removeFromCurrentlyPressedKeys } from './isHotkeyPressed'\n\nconst stopPropagation = (e: KeyboardEvent): void => {\n  e.stopPropagation()\n  e.preventDefault()\n  e.stopImmediatePropagation()\n}\n\nconst useSafeLayoutEffect = typeof window !== 'undefined' ? useLayoutEffect : useEffect\n\nexport default function useHotkeys<T extends HTMLElement>(\n  keys: Keys,\n  callback: HotkeyCallback,\n  options?: OptionsOrDependencyArray,\n  dependencies?: OptionsOrDependencyArray,\n) {\n  const ref = useRef<RefType<T>>(null)\n  const hasTriggeredRef = useRef(false)\n\n  const _options: Options | undefined = !(options instanceof Array) ? (options as Options) : !(dependencies instanceof Array) ? (dependencies as Options) : undefined\n  const _deps: DependencyList | undefined = options instanceof Array ? options : dependencies instanceof Array ? dependencies : undefined\n\n  const memoisedCB = useCallback(callback, _deps ?? [])\n  const cbRef = useRef<HotkeyCallback>(memoisedCB);\n\n  if(_deps) {\n    cbRef.current = memoisedCB;\n  } else {\n    cbRef.current = callback;\n  }\n\n  const memoisedOptions = useDeepEqualMemo(_options)\n\n  const { enabledScopes } = useHotkeysContext()\n  const proxy = useBoundHotkeysProxy()\n\n  useSafeLayoutEffect(() => {\n    if (memoisedOptions?.enabled === false || !isScopeActive(enabledScopes, memoisedOptions?.scopes)) {\n      return\n    }\n\n    const listener = (e: KeyboardEvent, isKeyUp: boolean = false) => {\n      if (isKeyboardEventTriggeredByInput(e) && !isHotkeyEnabledOnTag(e, memoisedOptions?.enableOnFormTags)) {\n        return\n      }\n\n      // TODO: SINCE THE EVENT IS NOW ATTACHED TO THE REF, THE ACTIVE ELEMENT CAN NEVER BE INSIDE THE REF. THE HOTKEY ONLY TRIGGERS IF THE\n      // REF IS THE ACTIVE ELEMENT. THIS IS A PROBLEM SINCE FOCUSED SUB COMPONENTS WON'T TRIGGER THE HOTKEY.\n      if (ref.current !== null && document.activeElement !== ref.current && !ref.current.contains(document.activeElement)) {\n        stopPropagation(e)\n\n        return\n      }\n\n      if (((e.target as HTMLElement)?.isContentEditable && !memoisedOptions?.enableOnContentEditable)) {\n        return\n      }\n\n      parseKeysHookInput(keys, memoisedOptions?.splitKey).forEach((key) => {\n        const hotkey = parseHotkey(key, memoisedOptions?.combinationKey)\n\n        if (isHotkeyMatchingKeyboardEvent(e, hotkey, memoisedOptions?.ignoreModifiers) || hotkey.keys?.includes('*')) {\n          if (isKeyUp && hasTriggeredRef.current) {\n            return\n          }\n\n          maybePreventDefault(e, hotkey, memoisedOptions?.preventDefault)\n\n          if (!isHotkeyEnabled(e, hotkey, memoisedOptions?.enabled)) {\n            stopPropagation(e)\n\n            return\n          }\n\n          // Execute the user callback for that hotkey\n          cbRef.current(e, hotkey)\n\n          if (!isKeyUp) {\n            hasTriggeredRef.current = true\n          }\n        }\n      })\n    }\n\n    const handleKeyDown = (event: KeyboardEvent) => {\n      if (event.key === undefined) {\n        // Synthetic event (e.g., Chrome autofill).  Ignore.\n        return\n      }\n\n      pushToCurrentlyPressedKeys(mapKey(event.code))\n\n      if ((memoisedOptions?.keydown === undefined && memoisedOptions?.keyup !== true) || memoisedOptions?.keydown) {\n        listener(event)\n      }\n    }\n\n    const handleKeyUp = (event: KeyboardEvent) => {\n      if (event.key === undefined) {\n        // Synthetic event (e.g., Chrome autofill).  Ignore.\n        return\n      }\n\n      removeFromCurrentlyPressedKeys(mapKey(event.code))\n\n      hasTriggeredRef.current = false\n\n      if (memoisedOptions?.keyup) {\n        listener(event, true)\n      }\n    }\n\n    // @ts-ignore\n    (ref.current || _options?.document || document).addEventListener('keyup', handleKeyUp);\n    // @ts-ignore\n    (ref.current || _options?.document || document).addEventListener('keydown', handleKeyDown)\n\n    if (proxy) {\n      parseKeysHookInput(keys, memoisedOptions?.splitKey).forEach((key) => proxy.addHotkey(parseHotkey(key, memoisedOptions?.combinationKey)))\n    }\n\n    return () => {\n      // @ts-ignore\n      (ref.current || _options?.document || document).removeEventListener('keyup', handleKeyUp);\n      // @ts-ignore\n      (ref.current || _options?.document || document).removeEventListener('keydown', handleKeyDown)\n\n      if (proxy) {\n        parseKeysHookInput(keys, memoisedOptions?.splitKey).forEach((key) => proxy.removeHotkey(parseHotkey(key, memoisedOptions?.combinationKey)))\n      }\n    }\n  }, [keys, memoisedOptions, enabledScopes])\n\n  return ref\n}\n","import { useRef } from 'react'\nimport deepEqual from './deepEqual'\n\nexport default function useDeepEqualMemo<T>(value: T) {\n  const ref = useRef<T | undefined>(undefined)\n\n  if (!deepEqual(ref.current, value)) {\n    ref.current = value\n  }\n\n  return ref.current\n}\n","import { useCallback, useState } from 'react'\nimport { mapKey } from './parseHotkeys'\n\nexport default function useRecordHotkeys() {\n  const [keys, setKeys] = useState(new Set<string>())\n  const [isRecording, setIsRecording] = useState(false);\n\n  const handler = useCallback((event: KeyboardEvent) => {\n    if (event.key === undefined) {\n      // Synthetic event (e.g., Chrome autofill).  Ignore.\n      return\n    }\n\n    event.preventDefault()\n    event.stopPropagation()\n\n    setKeys(prev => {\n      const newKeys = new Set(prev)\n\n      newKeys.add(mapKey(event.code))\n\n      return newKeys\n    })\n  }, [])\n\n  const stop = useCallback(() => {\n    if (typeof document !== 'undefined') {\n      document.removeEventListener('keydown', handler)\n\n      setIsRecording(false)\n    }\n  }, [handler])\n\n  const start = useCallback(() => {\n    setKeys(new Set<string>())\n\n    if (typeof document !== 'undefined') {\n      stop()\n\n      document.addEventListener('keydown', handler)\n\n      setIsRecording(true)\n    }\n  }, [handler, stop])\n\n  return [keys, { start, stop, isRecording }] as const\n}\n"],"names":["reservedModifierKeywords","mappedKeys","esc","return",".",",","-"," ","`","#","+","ShiftLeft","ShiftRight","AltLeft","AltRight","MetaLeft","MetaRight","ControlLeft","ControlRight","mapKey","key","trim","toLowerCase","replace","parseKeysHookInput","keys","splitKey","split","parseHotkey","hotkey","combinationKey","toLocaleLowerCase","map","k","alt","includes","ctrl","shift","meta","mod","filter","currentlyPressedKeys","Set","isHotkeyPressed","Array","isArray","every","has","pushToCurrentlyPressedKeys","hotkeyArray","forEach","isHotkeyModifier","add","removeFromCurrentlyPressedKeys","clear","isHotkeyEnabledOnTag","enabledOnTags","target","targetTagName","tagName","Boolean","some","tag","document","addEventListener","e","undefined","code","window","BoundHotkeysProxyProvider","createContext","BoundHotkeysProxyProviderProvider","_jsx","Provider","value","addHotkey","removeHotkey","children","deepEqual","x","y","Object","length","reduce","isEqual","HotkeysContext","hotkeys","enabledScopes","toggleScope","enableScope","disableScope","useHotkeysContext","useContext","stopPropagation","preventDefault","stopImmediatePropagation","useSafeLayoutEffect","useLayoutEffect","useEffect","initiallyActiveScopes","useState","internalActiveScopes","setInternalActiveScopes","boundHotkeys","setBoundHotkeys","useCallback","scope","prev","from","s","addBoundHotkey","removeBoundHotkey","h","callback","options","dependencies","ref","useRef","hasTriggeredRef","_options","_deps","memoisedCB","cbRef","current","memoisedOptions","useDeepEqualMemo","proxy","enabled","scopes","activeScopes","console","warn","listener","isKeyUp","enableOnFormTags","activeElement","contains","_e$target","isContentEditable","enableOnContentEditable","ignoreModifiers","pressedKeyUppercase","ctrlKey","metaKey","shiftKey","altKey","keyCode","pressedKey","isHotkeyMatchingKeyboardEvent","_hotkey$keys","maybePreventDefault","isHotkeyEnabled","handleKeyDown","event","keydown","keyup","handleKeyUp","removeEventListener","setKeys","isRecording","setIsRecording","handler","newKeys","stop","start"],"mappings":"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"}